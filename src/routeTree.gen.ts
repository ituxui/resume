/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UipRouteImport } from './routes/uip'
import { Route as TsdRouteImport } from './routes/tsd'
import { Route as RdpLandingRouteImport } from './routes/rdp-landing'
import { Route as RdpDashboardRouteImport } from './routes/rdp-dashboard'
import { Route as DviprazRouteImport } from './routes/dvipraz'
import { Route as DostavRouteImport } from './routes/dostav'
import { Route as AeroaktRouteImport } from './routes/aeroakt'
import { Route as IndexRouteImport } from './routes/index'

const UipRoute = UipRouteImport.update({
  id: '/uip',
  path: '/uip',
  getParentRoute: () => rootRouteImport,
} as any)
const TsdRoute = TsdRouteImport.update({
  id: '/tsd',
  path: '/tsd',
  getParentRoute: () => rootRouteImport,
} as any)
const RdpLandingRoute = RdpLandingRouteImport.update({
  id: '/rdp-landing',
  path: '/rdp-landing',
  getParentRoute: () => rootRouteImport,
} as any)
const RdpDashboardRoute = RdpDashboardRouteImport.update({
  id: '/rdp-dashboard',
  path: '/rdp-dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DviprazRoute = DviprazRouteImport.update({
  id: '/dvipraz',
  path: '/dvipraz',
  getParentRoute: () => rootRouteImport,
} as any)
const DostavRoute = DostavRouteImport.update({
  id: '/dostav',
  path: '/dostav',
  getParentRoute: () => rootRouteImport,
} as any)
const AeroaktRoute = AeroaktRouteImport.update({
  id: '/aeroakt',
  path: '/aeroakt',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/aeroakt': typeof AeroaktRoute
  '/dostav': typeof DostavRoute
  '/dvipraz': typeof DviprazRoute
  '/rdp-dashboard': typeof RdpDashboardRoute
  '/rdp-landing': typeof RdpLandingRoute
  '/tsd': typeof TsdRoute
  '/uip': typeof UipRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/aeroakt': typeof AeroaktRoute
  '/dostav': typeof DostavRoute
  '/dvipraz': typeof DviprazRoute
  '/rdp-dashboard': typeof RdpDashboardRoute
  '/rdp-landing': typeof RdpLandingRoute
  '/tsd': typeof TsdRoute
  '/uip': typeof UipRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/aeroakt': typeof AeroaktRoute
  '/dostav': typeof DostavRoute
  '/dvipraz': typeof DviprazRoute
  '/rdp-dashboard': typeof RdpDashboardRoute
  '/rdp-landing': typeof RdpLandingRoute
  '/tsd': typeof TsdRoute
  '/uip': typeof UipRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/aeroakt'
    | '/dostav'
    | '/dvipraz'
    | '/rdp-dashboard'
    | '/rdp-landing'
    | '/tsd'
    | '/uip'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/aeroakt'
    | '/dostav'
    | '/dvipraz'
    | '/rdp-dashboard'
    | '/rdp-landing'
    | '/tsd'
    | '/uip'
  id:
    | '__root__'
    | '/'
    | '/aeroakt'
    | '/dostav'
    | '/dvipraz'
    | '/rdp-dashboard'
    | '/rdp-landing'
    | '/tsd'
    | '/uip'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AeroaktRoute: typeof AeroaktRoute
  DostavRoute: typeof DostavRoute
  DviprazRoute: typeof DviprazRoute
  RdpDashboardRoute: typeof RdpDashboardRoute
  RdpLandingRoute: typeof RdpLandingRoute
  TsdRoute: typeof TsdRoute
  UipRoute: typeof UipRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/uip': {
      id: '/uip'
      path: '/uip'
      fullPath: '/uip'
      preLoaderRoute: typeof UipRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tsd': {
      id: '/tsd'
      path: '/tsd'
      fullPath: '/tsd'
      preLoaderRoute: typeof TsdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rdp-landing': {
      id: '/rdp-landing'
      path: '/rdp-landing'
      fullPath: '/rdp-landing'
      preLoaderRoute: typeof RdpLandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rdp-dashboard': {
      id: '/rdp-dashboard'
      path: '/rdp-dashboard'
      fullPath: '/rdp-dashboard'
      preLoaderRoute: typeof RdpDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dvipraz': {
      id: '/dvipraz'
      path: '/dvipraz'
      fullPath: '/dvipraz'
      preLoaderRoute: typeof DviprazRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dostav': {
      id: '/dostav'
      path: '/dostav'
      fullPath: '/dostav'
      preLoaderRoute: typeof DostavRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/aeroakt': {
      id: '/aeroakt'
      path: '/aeroakt'
      fullPath: '/aeroakt'
      preLoaderRoute: typeof AeroaktRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AeroaktRoute: AeroaktRoute,
  DostavRoute: DostavRoute,
  DviprazRoute: DviprazRoute,
  RdpDashboardRoute: RdpDashboardRoute,
  RdpLandingRoute: RdpLandingRoute,
  TsdRoute: TsdRoute,
  UipRoute: UipRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
